<!DOCTYPE html>
<html>
<head>
    <% include ./partials/head %>
</head>

<body class="hm hm-has-top-menu hm-has-side-menu">
    <header>
        <% include ./partials/header %>
    </header>
    <aside>
        <% include ./partials/side-menu %>
    </aside>

    <main class="hm-main-view">
        <div class="p-3">
            <div class="form-group">
                <label class="bmd-label-static">Title</label>
                <select id="aa" class="form-control dropdown-search"  multiple="multiple" ></select>
                <div class="hm-input-error-msg">
                    Required Field!
                </div>
            </div>

            
            <div class="jumbotron jumbotron-fluid">
                <div class="container">
                    <div class="row no-gutters">
                        <div class="pr-3">
                            <i class="fa fa-cog fa-spin fa-5x"></i>
                        </div>
                        <div class="hm-col">
                            <h1 class="display-4"> Home Dashboard</h1>
                            <p class="lead">Under Construction Will Come Soon... </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer>
        <% include ./partials/footer %>
    </footer>

<script>

$(document).ready(function(){


    $( "#aa" ).select2({        
            ajax: {
                url: "https://api.github.com/search/repositories",
                dataType: 'json',
                delay: 25,
                data: function (params) {
                  return {
                    q: params.term, // search term
                    page: params.page
                  };
                },
                processResults: function (data, params) {
                  // parse the results into the format expected by Select2
                  // since we are using custom formatting functions we do not need to
                  // alter the remote JSON data, except to indicate that infinite
                  // scrolling can be used
                  console.log(data, params);
                  params.page = params.page || 1;

                  return {
                    results: data.items,
                    pagination: {
                      more: (params.page * 30) < data.total_count
                    }
                  };
                },
            cache: false
        },
        minimumInputLength: 1,
        escapeMarkup: function(markup) {
            return markup;
        },
        templateResult: function(data) {
            return '<div>'+data.full_name+'</div>';
        },
        templateSelection: function(data) {
            return '<div class="text-truncate hm-max-w-150">'+data.full_name+'</div>';
        } 
    });
    



});



    

        
</script>
</body>
</html>
